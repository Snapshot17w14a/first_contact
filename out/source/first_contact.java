/* autogenerated by Processing revision 1293 on 2023-11-23 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class first_contact extends PApplet {

enum GameState{Scenes, PipeGame, JarGame, CookGame, MainMenu};

//Framework Variables
GameState gameState = GameState.Scenes;
SceneManager sceneManager;
Scene currentScene;
Scene basementScene;
Scene hallwayScene;
Scene kitchenScene;
PImage basementBackground;
PImage hallwayBackground;
PImage kitchenBackground;
PImage magnifier;
Inventory inventory;
Item glass;
TextBox hallwayWoodBeam;

//Pipe Game Variables
int gridWidth = 5;
int gridHeight = 3;
static int gridBoxSize = 133;
ArrayList<PipeHolder> pipeHolders = new ArrayList<PipeHolder>();
PImage pipeGameBackground;
PImage straightPipeUpDown;
PImage straightPipeLeftRight;
PImage[] straightPipeImages = new PImage[2];
PImage[] cornerPipeImages = new PImage[4];

//Universal Variables
boolean allowMouseClick = true;

//String Variables
String blockedWay = "The pathway to the top floor seems to be blocked by a huge wooden beam!";

public void setup()
{
    /* size commented out by preprocessor */;
    //Background images
    basementBackground = loadImage("basementBackground.png");
    hallwayBackground = loadImage("hallwayBackground.png");
    kitchenBackground = loadImage("kitchenBackground.png");

    //Item images
    magnifier = loadImage("magnifier.png");

    //PipeGame images
    pipeGameBackground = loadImage("pipeBackground.png");
    straightPipeImages[0] = loadImage("Pipe_Straight_UpDown.png");
    straightPipeImages[1] = loadImage("Pipe_Straight_LeftRight.png");
    cornerPipeImages[0] = loadImage("Pipe_Corner_SouthEast.png");
    cornerPipeImages[1] = loadImage("Pipe_Corner_SouthWest.png");
    cornerPipeImages[2] = loadImage("Pipe_Corner_NorthEast.png");
    cornerPipeImages[3] = loadImage("Pipe_Corner_NorthWest.png");

    //SceneManager initialization
    sceneManager = new SceneManager();

    //Inventory initializatiob
    inventory = new Inventory(3, 100, 10);

    //Item initialization
    glass = new Item(magnifier);

    //Scene initialization
    basementScene = new Scene(basementBackground);
    hallwayScene = new Scene(hallwayBackground);
    kitchenScene = new Scene(kitchenBackground);

    //TextBox initialization
    hallwayWoodBeam = hallwayScene.createTextBox(blockedWay);

    //Move button initialization
    basementScene.addMoveButton(new PVector(270, 175), new PVector(64, 64), hallwayScene, magnifier);
    hallwayScene.addMoveButton(new PVector(490, 530), new PVector(64, 64), basementScene, magnifier);
    hallwayScene.addMoveButton(new PVector(775, 320), new PVector(64, 64), kitchenScene, magnifier);
    kitchenScene.addMoveButton(new PVector(100, 400), new PVector(64, 64), hallwayScene, magnifier);
    

    //Item button initialization

    //Text button initialization
    hallwayScene.addTextButton(new PVector(270, 250), new PVector(64, 64), magnifier, hallwayWoodBeam);

    //Load first scene
    sceneManager.loadScene(basementScene);

    //Pipe Game initialization
    for(int rows = 0; rows < gridHeight; rows++)
    {
        int yPos = 170 + (gridBoxSize * rows);
        for(int column = 0; column < gridWidth; column++)
        {
            int xPos = 217 + (gridBoxSize * column);
            pipeHolders.add(new PipeHolder(new PVector(xPos, yPos)));
        }
    }
    PipeHolder ph = pipeHolders.get(0);
    for(int i = 0; i < pipeHolders.size(); i++)
    {
        PipeHolder pH = pipeHolders.get(i);
        int pipeType = (int)(random(0, 2));
        switch(pipeType)
        {
            case 0:
                pH.heldPipe = new CornerPipe(pH.position, (int)(random(0, 4)), i, cornerPipeImages);
                break;
            case 1:
                pH.heldPipe = new StraightPipe(pH.position, (int)(random(4, 6)), i, straightPipeImages);
                break;
        }
    }
}

public void draw() 
{
    background(0);
    if(gameState == GameState.Scenes) {drawScenes();}
    if(gameState == GameState.PipeGame) {pipeGame();}
}


//Mouse click handling
public void mousePressed() 
{
    if(allowMouseClick) sceneManager.mouseClick();
    if(allowMouseClick)
    {
        allowMouseClick = false;
        for(PipeHolder pH : pipeHolders)
        {
            if(pH.isOverHeldPipe())
            {
                pH.heldPipe.rotatePipe();
            }
        }
    }
    allowMouseClick = false;
    println("x: " + mouseX + " | " + "y: " + mouseY);
}

public void mouseReleased()
{
    allowMouseClick = true;
}

//PxC gameloop
public void drawScenes()
{
    sceneManager.draw();
    inventory.drawInventory();
}

//PipeGame gameloop
public void pipeGame()
{
    background(0);
    image(pipeGameBackground, 0, 0, width, height);
    for(PipeHolder pHolder : pipeHolders)
    {
        pHolder.drawHolder();
    }
}
enum ButtonType{Item, Move}

class Button
{
    PVector buttonPosition;
    PVector buttonSize;

    public void drawButton()
    {
        strokeWeight(0);
        rectMode(CENTER);
        fill(255, 255, 255, 0);
        rect(buttonPosition.x, buttonPosition.y, buttonSize.x, buttonSize.y);
    }

    public void buttonAction()
    {}
}
class CornerPipe extends Pipe
{
    PImage[] sprites = new PImage[4];

    CornerPipe(PVector pHolderPos, int pRotation, int pArrayIndex, PImage[] pImageArray)
    {
        pipeRotationNum = pRotation;
        holderPosition = pHolderPos;
        arrayIndex = pArrayIndex;
        sprites = pImageArray;
        switch(pRotation)
        {
            case 0:
                pipeRotation = PipeState.SouthEast;
                break;
            case 1:
                pipeRotation = PipeState.SouthWest;
                break;
            case 2:
                pipeRotation = PipeState.NorthWest;
                break;
            case 3:
                pipeRotation = PipeState.NorthEast;
                break;
        }
    }

    public void drawPipe()
    {
        fill(0);
        switch (pipeRotation) 
        {
            case SouthEast:
                spriteToDraw = sprites[0];
                break;
            case SouthWest:
                spriteToDraw = sprites[1];
                break;
            case NorthEast:
                spriteToDraw = sprites[2];
                break;
            case NorthWest:
                spriteToDraw = sprites[3];
                break;
        }
        image(spriteToDraw, holderPosition.x - gridBoxSize / 2, holderPosition.y - gridBoxSize / 2, gridBoxSize, gridBoxSize);
    }

    public void rotatePipe()
    {
        if(pipeRotationNum < 3) pipeRotationNum++;
        else pipeRotationNum = 0;
        switch(pipeRotationNum)
        {
            case 0:
                pipeRotation = PipeState.SouthEast;
                break;
            case 1:
                pipeRotation = PipeState.SouthWest;
                break;
            case 2:
                pipeRotation = PipeState.NorthWest;
                break;
            case 3:
                pipeRotation = PipeState.NorthEast;
                break;
        }
    }
}
class Inventory
{
    ArrayList<Item> heldItems = new ArrayList<Item>();
    int slotCount;
    int boxSize;
    int yOffset;
    int xPos = 10;
    boolean allowItemPickup;

    Inventory(int pSlotCount, int pBoxSize, int pYOffset)
    {
        slotCount = pSlotCount;
        boxSize = pBoxSize;
        yOffset = pYOffset;
    }

    public void drawInventory()
    {
        allowItemPickup = (heldItems.size() < slotCount) ? true : false;
        strokeWeight(0);
        fill(255, 255, 255, 255);
        for(int i = 0; i < slotCount; i++)
        {
            int yPos = (i * boxSize) + yOffset * (i + 1);
            rectMode(CORNER);
            rect(xPos, yPos, boxSize, boxSize);
        }
        int loopCount = min(heldItems.size(), slotCount);
        for(int i = 0; i < loopCount; i++)
        {
            Item item = heldItems.get(i);
            int yPos = (i * boxSize) + yOffset * (i + 1);
            image(item.itemImage, xPos, yPos, boxSize, boxSize);
        }
    }

    public boolean isInInventory(Item item, boolean removeFound)
    {
        boolean foundItem = false;
        for(int i = 0; i < heldItems.size(); i++)
        {
            if(heldItems.get(i) == item)
            {
                if(removeFound)
                {
                    heldItems.remove(i);
                }
                foundItem = true;
                break;
            }
        }
        return foundItem;
    }
}
class Item
{
    PImage itemImage;

    Item(PImage pitemImage)
    {
        itemImage = pitemImage;
    }
}
class ItemButton extends Button
{
    Item buttonItem;
    ArrayList removeButtonFrom;

    ItemButton(PVector pPos, PVector pSize, Item pItem, ArrayList pArray)
    {
        buttonPosition = pPos;
        buttonSize = pSize;
        buttonItem = pItem;
        removeButtonFrom = pArray;
    }

    public void buttonAction()
    {
        if(inventory.allowItemPickup)
        {
            inventory.heldItems.add(buttonItem);
            removeButtonFrom.remove(this);
        }
        else
        {
            println("inv full");
        }
    }

    public void drawButton()
    {
        strokeWeight(12);
        fill(255, 255, 255, 255);
        image(buttonItem.itemImage, buttonPosition.x - buttonSize.x/2, buttonPosition.y - buttonSize.y/2, buttonSize.x, buttonSize.y);
    }
}
class MoveButton extends Button
{
    GameState nextGameState;
    ButtonType buttonType;
    Scene sceneToMove;
    PImage buttonIcon;
    Item requieredItem;

    MoveButton(PVector pPos, PVector pSize, Scene pScene)
    {
        buttonPosition = pPos;
        buttonSize = pSize;
        sceneToMove = pScene;
    }

    MoveButton(PVector pPos, PVector pSize, Scene pScene, PImage pIcon)
    {
        buttonPosition = pPos;
        buttonSize = pSize;
        sceneToMove = pScene;
        buttonIcon = pIcon;
    }

    MoveButton(PVector pPos, PVector pSize, Scene pScene, PImage pIcon, Item pItem)
    {
        buttonPosition = pPos;
        buttonSize = pSize;
        sceneToMove = pScene;
        buttonIcon = pIcon;
        requieredItem = pItem;
    }

    MoveButton(PVector pPos, PVector pSize, PImage pIcon, GameState pGameState)
    {
        buttonPosition = pPos;
        buttonSize = pSize;
        buttonIcon = pIcon;
        nextGameState = pGameState;
    }

    public void drawButton()
    {
        strokeWeight(0);
        rectMode(CENTER);
        fill(255, 255, 255, 0);
        rect(buttonPosition.x, buttonPosition.y, buttonSize.x, buttonSize.y);
        fill(255, 255, 255, 255);
        if(buttonIcon != null) image(buttonIcon, buttonPosition.x - buttonSize.x/2, buttonPosition.y - buttonSize.y/2, 64, 64);
    }

    public void buttonAction()
    {
        if(requieredItem != null)
        {
            if(inventory.isInInventory(requieredItem, true))
            {
                sceneManager.loadScene(sceneToMove);
            }
            else
            {
                println("missing item");
            }
        }
        else if(nextGameState != null)
        {
            gameState = nextGameState;
        }
        else
        {
            sceneManager.loadScene(sceneToMove);
        }
    }
}
enum PipeState{SouthEast, SouthWest, NorthEast, NorthWest, UpDown, LeftRight};
class Pipe
{
    PImage spriteToDraw;
    PipeState pipeRotation;
    PVector holderPosition;
    int pipeRotationNum;
    int arrayIndex;

    public void rotatePipe()
    {}

    public void drawPipe()
    {}
}
class PipeHolder
{
    PVector position;
    Pipe heldPipe;

    PipeHolder(PVector pPos)
    {
        position = pPos;
    }

    public void drawHolder()
    {
        rectMode(CENTER);
        fill(255, 255, 255, 0);
        rect(position.x, position.y, gridBoxSize, gridBoxSize);
        heldPipe.drawPipe();
    }

    public boolean isOverHeldPipe()
    {
        return mouseX < position.x + gridBoxSize/2 && mouseX > position.x - gridBoxSize/2 && mouseY < position.y + gridBoxSize/2 && mouseY > position.y - gridBoxSize/2;
    }
}
class Scene
{
    PImage background;
    ArrayList<Button> sceneButtons = new ArrayList<Button>();
    ArrayList<TextBox> sceneTexts = new ArrayList<TextBox>();
    boolean isTextBeingRendered = false;

    Scene(PImage pBackground)
    {
        background = pBackground;
    }

    //Draws the scene and the buttons in the scene
    public void drawScene()
    {
        image(background, 0, 0, width, height);
        for(Button button : sceneButtons)
        {
            button.drawButton();
        }
        for(TextBox textBox : sceneTexts)
        {
            if(textBox.renderText) {textBox.drawTextBox();}
        }
    }

    //Basic move button
    public void addMoveButton(PVector pPos, PVector pSize, Scene pScene)
    {
        sceneButtons.add(new MoveButton(pPos, pSize, pScene));
    }

    //Move button with icon
    public void addMoveButton(PVector pPos, PVector pSize, Scene pScene, PImage pIcon)
    {
        sceneButtons.add(new MoveButton(pPos, pSize, pScene, pIcon));
    }

    //Move button with Item condition
    public void addMoveButton(PVector pPos, PVector pSize, Scene pScene, PImage pIcon, Item pItem)
    {
        sceneButtons.add(new MoveButton(pPos, pSize, pScene, pIcon, pItem));
    }

    //Move button with GameState change - use when changing to minigames
    public void addMoveButton(PVector pPos, PVector pSize, PImage pIcon, GameState pGameState)
    {
        sceneButtons.add(new MoveButton(pPos, pSize, pIcon, pGameState));
    }

    //Basic item button
    public void addItemButton(PVector pPos, PVector pSize, Item pItem)
    {
        sceneButtons.add(new ItemButton(pPos, pSize, pItem, sceneButtons));
    }

    //Basic text button
    public void addTextButton(PVector pPos, PVector pSize, PImage pIcon, TextBox pText)
    {
        sceneButtons.add(new TextButton(pPos, pSize, pIcon, pText));
    }

    //Basic text box
    public TextBox createTextBox(String pText)
    {
        TextBox tempTextBox = new TextBox(pText, this);
        sceneTexts.add(tempTextBox);
        return tempTextBox;
    }

    //Checks for collision on all buttons in the Scene
    public void checkButtonCollision()
    {
        if(isTextBeingRendered) 
        {
            isTextBeingRendered = false;
            for(TextBox textBox : sceneTexts)
            {
                if(textBox.renderText)
                {
                    textBox.toggleRender();
                    break;
                }
            }
        }
        else 
        {
            for(Button button : sceneButtons)
            {
                if(mouseX < button.buttonPosition.x + button.buttonSize.x/2 && mouseX > button.buttonPosition.x - button.buttonSize.x/2 && mouseY < button.buttonPosition.y + button.buttonSize.y/2 && mouseY > button.buttonPosition.y - button.buttonSize.y/2)
                {
                    button.buttonAction();
                    break;
                }
            }
        }
    }
}
class SceneManager
{
    Scene currentScene;

    public void draw()
    {
        currentScene.drawScene();
    }

    public void loadScene(Scene newScene)
    {
        currentScene = newScene;
    }

    public void mouseClick()
    {
        currentScene.checkButtonCollision();
    }
}
class StraightPipe extends Pipe
{
    PImage[] sprites = new PImage[2];

    StraightPipe(PVector pHolderPos, int pRotation, int pArrayIndex, PImage[] pImageArray)
    {
        pipeRotationNum = pRotation;
        holderPosition = pHolderPos;
        arrayIndex = pArrayIndex;
        sprites = pImageArray;
        switch(pRotation)
        {
            case 4:
                pipeRotation = PipeState.UpDown;
                break;
            case 5:
                pipeRotation = PipeState.LeftRight;
                break;
        }
    }

    public void drawPipe()
    {
        fill(255, 255, 255, 0);
        switch(pipeRotation)
        {
            case UpDown:
                spriteToDraw = sprites[0];
                break;
            case LeftRight:
                spriteToDraw = sprites[1];
                break;
        }
        image(spriteToDraw, holderPosition.x - gridBoxSize / 2, holderPosition.y - gridBoxSize / 2, gridBoxSize, gridBoxSize);
    }

    public void rotatePipe()
    {
        switch(pipeRotationNum)
        {
            case 4:
                pipeRotationNum = 5;
                pipeRotation = PipeState.LeftRight;
                break;
            case 5:
                pipeRotationNum = 4;
                pipeRotation = PipeState.UpDown;
                break;
        }
    }
}
class TextBox
{
    String bodyText;
    boolean renderText;
    Scene parentScene;

    TextBox(String pText, Scene pScene)
    {
        bodyText = pText;
        parentScene = pScene;
    }

    public void toggleRender()
    {
        renderText = !renderText;
        parentScene.isTextBeingRendered = renderText;
    }

    public void drawTextBox()
    {
        rectMode(CENTER);
        strokeWeight(2);
        fill(255, 255, 255, 255);
        rect(width/2, 550, width - 40, 80);
        textAlign(LEFT, TOP);
        textSize(20);
        fill(0, 0, 0, 255);
        rectMode(CENTER);
        text(bodyText, width/2, 550, width - 60, 70);
    }
}
class TextButton extends Button
{
    PImage buttonIcon;
    TextBox textBoxToRender; 

    TextButton(PVector pPos, PVector pSize, PImage pIcon, TextBox pTextBox)
    {
        buttonPosition = pPos;
        buttonSize = pSize;
        buttonIcon = pIcon;
        textBoxToRender = pTextBox;
    }

    public void buttonAction()
    {
        textBoxToRender.toggleRender();
    }

    public void drawButton()
    {
        strokeWeight(12);
        fill(255, 255, 255, 255);
        image(buttonIcon, buttonPosition.x - buttonSize.x/2, buttonPosition.y - buttonSize.y/2, buttonSize.x, buttonSize.y);
    }
}


  public void settings() { size(1000, 600); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "first_contact" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
