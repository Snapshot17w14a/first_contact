/* autogenerated by Processing revision 1293 on 2023-11-29 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.sound.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class first_contact extends PApplet {



enum GameState{Scenes, PipeGame, JarGame, CookGame, MainMenu, WinMenu};

//Framework Variables
GameState gameState = GameState.MainMenu;
SceneManager sceneManager;
Scene currentScene;
Scene basementScene;
Scene hallwayScene;
Scene kitchenScene;
Scene storageScene;
Scene winScene;
PImage basementBackground;
PImage hallwayBackground;
PImage kitchenBackground;
PImage storageBackground;
PImage winBackground;
PImage mainMenuBackground;
PImage magnifier;
PImage keyImage;
Inventory inventory;
Item glass;
Item pipeKey;
Item cookKey;
Item jarKey;
TextBox hallwayWoodBeam;
SoundFile mainMenuMusic;
SoundFile gameMusic;
SoundFile grabObject;
SoundFile mainDoorUnlock;
SoundFile pipeGameVictory;
SoundFile correctChime;
SoundFile pipeSound;
SoundFile[] roomTransitions = new SoundFile[3];
boolean isHowToPlay = false;
boolean isWinMenu = false;
boolean isMainMenuLooped = false;
boolean isgameMusicLooped = false;

//PipeGame Variables
int gridWidth = 5;
int gridHeight = 3;
int usedLayout;
static int gridBoxSize = 133;
ArrayList<PipeHolder> pipeHolders = new ArrayList<PipeHolder>();
PImage pipeGameBackground;
PImage straightPipeUpDown;
PImage straightPipeLeftRight;
PImage[] straightPipeImages = new PImage[2];
PImage[] cornerPipeImages = new PImage[4];
int[][] pipeLayouts = {{1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0}, {0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1}};
int[][] pipeSolutions = {{5, 1, -1, 0, 1, -1, 4, 0, 2, 4, -1, 3, 2, -1, 3}, {1, 0, 5, 5, 1, 4, 4, -1, 0, 2, 3, 2, -1, 3, 5}};
int[] correctCountAmount = {11, 13};
boolean isPipeGameOver = false;

//JarGame Variables
int jarCount = 5;
Jar[] correctJarOrder;
Jar[] randomJarOrder;
Jar selectedJar;
boolean allowClick = true;
boolean isJarAvailable = false;
JarButton moveLeft;
JarButton moveRight;
PImage jarArrowLeft;
PImage jarArrowRight;
PImage jarImage;

//Universal Variables
int targetMilliseconds;
boolean allowMouseClick = true;
boolean isDelaySet = false;
PFont baseFont;
PFont titleFont;

//Menu Variables
PVector playButtonPosition = new PVector(715, 400);
PVector howToButtonPosition = new PVector(750, 490);
PVector backButtonPosition = new PVector(900, 540);
PVector mainmenuButtonPosition = new PVector(400, 550);
PVector quitButtonPosition = new PVector(600, 550);

//String Variables
String blockedWay = "The pathway to the top floor seems to be blocked by a huge wooden beam!";

public void setup()
{
    /* size commented out by preprocessor */;
    //Load Music
    mainMenuMusic = new SoundFile(this, "Title_screen_soundtrack.wav");
    gameMusic = new SoundFile(this, "Soundtrack_v.3.wav");
    grabObject = new SoundFile(this, "grabbing_object.wav");
    mainDoorUnlock = new SoundFile(this, "door_unlock.wav");
    pipeGameVictory = new SoundFile(this, "water_puzzle_complete.wav");
    correctChime = new SoundFile(this, "correct_chime.wav");
    pipeSound = new SoundFile(this, "pipeRotating.wav");
    roomTransitions[0] = new SoundFile(this, "door_1.wav");
    roomTransitions[1] = new SoundFile(this, "door_2.wav");
    roomTransitions[2] = new SoundFile(this, "door_3.wav");

    //Load fonts
    baseFont = createFont("monbaiti.ttf", 24);
    titleFont = createFont("lucindablack.ttf", 96);
    
    //Background images
    basementBackground = loadImage("basementBackground.png");
    hallwayBackground = loadImage("hallwayBackground.png");
    kitchenBackground = loadImage("kitchenBackground.png");
    storageBackground = loadImage("storageBackground.png");
    mainMenuBackground = loadImage("mainMenu.png");
    winBackground = loadImage("Factory1.png");

    //Item images
    magnifier = loadImage("magnifier.png");
    keyImage = loadImage("key.png");

    //PipeGame images
    pipeGameBackground = loadImage("pipeBackground.png");
    straightPipeImages[0] = loadImage("Pipe_Straight_UpDown.png");
    straightPipeImages[1] = loadImage("Pipe_Straight_LeftRight.png");
    cornerPipeImages[0] = loadImage("Pipe_Corner_SouthEast.png");
    cornerPipeImages[1] = loadImage("Pipe_Corner_SouthWest.png");
    cornerPipeImages[2] = loadImage("Pipe_Corner_NorthEast.png");
    cornerPipeImages[3] = loadImage("Pipe_Corner_NorthWest.png");

    //SceneManager initialization
    sceneManager = new SceneManager();

    //Inventory initializatiob
    inventory = new Inventory(3, 100, 10);

    //Item initialization
    glass = new Item(magnifier);
    pipeKey = new Item(keyImage);
    cookKey = new Item(keyImage);
    jarKey = new Item(keyImage);

    //Scene initialization
    basementScene = new Scene(basementBackground);
    hallwayScene = new Scene(hallwayBackground);
    kitchenScene = new Scene(kitchenBackground);
    storageScene = new Scene(storageBackground);
    winScene = new Scene(winBackground);

    //TextBox initialization
    hallwayWoodBeam = hallwayScene.createTextBox(blockedWay);

    //Move button initialization
    basementScene.addMoveButton(new PVector(270, 175), new PVector(64, 64), hallwayScene, magnifier);
    basementScene.addMoveButton(new PVector(570, 215), new PVector(64, 64), magnifier, GameState.PipeGame);
    hallwayScene.addMoveButton(new PVector(490, 530), new PVector(64, 64), basementScene, magnifier);
    hallwayScene.addMoveButton(new PVector(775, 320), new PVector(64, 64), kitchenScene, magnifier);
    hallwayScene.addMoveButton(new PVector(430, 290), new PVector(64, 64), storageScene, magnifier);
    hallwayScene.addExitButton(new PVector(550, 245), new PVector(64, 64), keyImage, winScene);
    kitchenScene.addMoveButton(new PVector(100, 400), new PVector(64, 64), hallwayScene, magnifier);
    storageScene.addMoveButton(new PVector(width/2, 550), new PVector(64, 64), hallwayScene, magnifier);
    storageScene.addMoveButton(new PVector(265, 300), new PVector(64, 64), magnifier, GameState.JarGame);

    //Item button initialization
    kitchenScene.addItemButton(new PVector(510, 200), new PVector(64, 64), cookKey);

    //Text button initialization
    hallwayScene.addTextButton(new PVector(270, 250), new PVector(64, 64), magnifier, hallwayWoodBeam);

    //Load first scene
    sceneManager.loadScene(basementScene);

    //Pipe Game initialization
    for(int rows = 0; rows < gridHeight; rows++)
    {
        int yPos = 170 + (gridBoxSize * rows);
        for(int column = 0; column < gridWidth; column++)
        {
            int xPos = 217 + (gridBoxSize * column);
            pipeHolders.add(new PipeHolder(new PVector(xPos, yPos)));
        }
    }
    usedLayout = (int)(random(0, 2));
    for(int i = 0; i < pipeHolders.size(); i++)
    {
        PipeHolder pH = pipeHolders.get(i);
        switch(pipeLayouts[usedLayout][i])
        {
            case 0:
                pH.heldPipe = new CornerPipe(pH.position, (int)(random(0, 4)), i, cornerPipeImages);
                break;
            case 1:
                pH.heldPipe = new StraightPipe(pH.position, (int)(random(4, 6)), i, straightPipeImages);
                break;
        }
    }

    //JarGame Initialization
    jarArrowLeft = loadImage("left_arrow.png");
    jarArrowRight = loadImage("right_arrow.png");
    jarImage = loadImage("jar.png");
    correctJarOrder = new Jar[jarCount];
    randomJarOrder = new Jar[jarCount];
    for(int i = 0; i < jarCount; i++)
    {
        correctJarOrder[i] = new Jar(new PVector(100, 200 + (i * 10)), i, jarImage);
    }
    for(int i = 0; i < jarCount; i++)
    {
        scrambleJars(i);
    }
    moveRight = new JarButton(jarArrowRight, new PVector(700, 500));
    moveLeft = new JarButton(jarArrowLeft, new PVector(300, 500));
    selectedJar = null;
}

public void draw() 
{
    background(0);
    println(frameRate);
    if(gameState == GameState.Scenes) {drawScenes(); return;}
    if(gameState == GameState.PipeGame) {pipeGame(); return;}
    if(gameState == GameState.JarGame) {jarGame(); return;}
    if(gameState == GameState.MainMenu) {mainMenu(); return;}
    if(gameState == GameState.WinMenu) {winMenu(); return;}
}

//Mouse click handling
public void mousePressed() 
{
    if(allowMouseClick)
    {
        switch(gameState)
        {
            case Scenes:
                sceneManager.mouseClick();
                break;
            case PipeGame:
                allowMouseClick = false;
                for(PipeHolder pH : pipeHolders)
                {
                    if(pH.isOverHeldPipe() && !isPipeGameOver)
                    {
                        pH.heldPipe.rotatePipe();
                    }
                }
                break;
            case JarGame:
                if(isJarAvailable && moveRight.isOverJarButton()) {moveRight.moveRight(selectedJar.jarPosition);}
                else if(isJarAvailable && moveLeft.isOverJarButton()) {moveLeft.moveLeft(selectedJar.jarPosition);}
                else if(isJarAvailable) {selectedJar.isJarSelected = false; selectedJar = null;}
                else 
                {
                    for(Jar jar : correctJarOrder)
                    {
                        if(jar.isOverJar())
                        {
                            selectedJar = jar;
                            jar.isJarSelected = true;
                        }
                    }
                }
                break;
            case MainMenu:
            case WinMenu:
                checkMenuClick();
                break;
        }
    }
    allowMouseClick = false;
    println("x: " + mouseX + " | " + "y: " + mouseY);
}
public void mouseReleased()
{
    allowMouseClick = true;
}

//PxC gameloop
public void drawScenes()
{
    sceneManager.draw();
    inventory.drawInventory();
}

//PipeGame gameloop
public void pipeGame()
{
    int correctCount = 0;
    background(0);
    image(pipeGameBackground, 0, 0, width, height);
    for(PipeHolder pHolder : pipeHolders)
    {
        pHolder.drawHolder();
    }
    for(int i = 0; i < pipeHolders.size(); i++)
    {
        PipeHolder pHolder = pipeHolders.get(i);
        if(pipeSolutions[usedLayout][i] != -1 && pipeSolutions[usedLayout][i] == pHolder.heldPipe.pipeRotationNum)
        {
            correctCount++;
        }
    }
    if(correctCount == correctCountAmount[usedLayout])
    {
        isPipeGameOver = true;
        if(!isDelaySet) {setupDelay((int)(pipeGameVictory.duration())); pipeGameVictory.play(); correctChime.play();}
        if(isDelayOver())
        {
            sceneManager.loadScene(basementScene);
            gameState = GameState.Scenes;
            basementScene.sceneButtons.remove(1);
            inventory.heldItems.add(pipeKey);
            grabObject.play();
        }
    }
}

//JarGame gameloop
public void jarGame()
{
    background(128);
    for(Jar jar : correctJarOrder)
    {
        jar.drawJar();
    }
    if(selectedJar != null)
    {
        isJarAvailable = true;
        moveRight.drawArrow();
        moveLeft.drawArrow();
    }
    else
    {
        isJarAvailable = false;
    }
    int correctCount = 0;
    for(Jar jar : correctJarOrder)
    {
        if(jar.isInCorrectSpot == true) correctCount++;
    }
    textAlign(CENTER, CENTER);
    if(correctCount == 5)
    {
        sceneManager.loadScene(storageScene);
        gameState = GameState.Scenes;
        storageScene.sceneButtons.remove(1);
        inventory.heldItems.add(jarKey);
        isDelaySet = false;
    }
}

public void scrambleJars(int index)
{
    int correctArrayIndex = index;
    int randomArrayIndex;
    do{randomArrayIndex = (int)(random(0, jarCount));}
    while(randomJarOrder[randomArrayIndex] != null);
    randomJarOrder[randomArrayIndex] = correctJarOrder[correctArrayIndex];
    randomJarOrder[randomArrayIndex].jarPosition = randomArrayIndex;
}

//Main Menu logic
public void mainMenu()
{
    if(!isMainMenuLooped) {isMainMenuLooped = true; mainMenuMusic.loop();}
    imageMode(CENTER);
    background(mainMenuBackground);
    strokeWeight(2);
    fill(0xFFFF0000);
    rectMode(CENTER);
    if(!isHowToPlay)
    {
        rect(playButtonPosition.x, playButtonPosition.y, 250, 70, 10);
        fill(0xFF00FF00);
        rect(howToButtonPosition.x, howToButtonPosition.y, 150, 50, 5);
        textAlign(CENTER, CENTER);
        textFont(baseFont, 36);
        fill(0xFF000000);
        text("Play", playButtonPosition.x, playButtonPosition.y);
        textFont(baseFont, 24);
        text("How to play", howToButtonPosition.x, howToButtonPosition.y);
        textAlign(LEFT, CENTER);
        textFont(titleFont, 94);
        text("Phantom Liberation", 20, 160);
        fill(0xFFFF0000);
        text("Phantom Liberation", 16, 156);
    }
    else
    {
        rect(backButtonPosition.x, backButtonPosition.y, 100, 50, 5);
        fill(0xFF000000);
        textAlign(CENTER, CENTER);
        textFont(baseFont, 24);
        text("Back", backButtonPosition.x, backButtonPosition.y);
        textAlign(LEFT, CENTER);
        textFont(titleFont, 36);
        text("Phantom Liberation", 20, 40);
        fill(0xFFFF0000);
        text("Phantom Liberation", 18, 38);
        fill(128, 128, 128, 196);
        rect(width/2, height/2, 900, 400);
        textAlign(LEFT, TOP);
        fill(0);
        textFont(baseFont, 24);
        text("do puzzles, get keys and escape", width/2, height/2, 890, 390);
    }
}

public void checkMenuClick()
{
    if(isHowToPlay && mouseX < backButtonPosition.x + 100/2 && mouseX > backButtonPosition.x - 100/2 && mouseY < backButtonPosition.y + 50/2 && mouseY > backButtonPosition.y - 50/2)
    {
        isHowToPlay = false;
    }
    if(!isHowToPlay && mouseX < playButtonPosition.x + 250/2 && mouseX > playButtonPosition.x - 250/2 && mouseY < playButtonPosition.y + 70/2 && mouseY > playButtonPosition.y - 70/2)
    {
        gameState = GameState.Scenes;
        mainMenuMusic.stop();
        gameMusic.loop();
    }
    else if(!isHowToPlay && mouseX < howToButtonPosition.x + 150/2 && mouseX > howToButtonPosition.x - 150/2 && mouseY < howToButtonPosition.y + 50/2 && mouseY > howToButtonPosition.y - 50/2)
    {
        isHowToPlay = true;
    }
    if(isWinMenu && mouseX < mainmenuButtonPosition.x + 180/2 && mouseX > mainmenuButtonPosition.x - 180/2 && mouseY < mainmenuButtonPosition.y + 50/2 && mouseY > mainmenuButtonPosition.y - 50/2)
    {
        resetGame();
        gameState = GameState.MainMenu;
        isWinMenu = false;
    }
    if(isWinMenu && mouseX < quitButtonPosition.x + 180/2 && mouseX > quitButtonPosition.x - 180/2 && mouseY < quitButtonPosition.y + 50/2 && mouseY > quitButtonPosition.y - 50/2)
    {
        exit();
    }
}

public void winMenu()
{
    strokeWeight(2);
    imageMode(CENTER);
    background(mainMenuBackground);
    fill(0xFF00FF00);
    rectMode(CENTER);
    rect(mainmenuButtonPosition.x, mainmenuButtonPosition.y, 180, 50, 5);
    fill(0xFFFF0000);
    rect(quitButtonPosition.x, quitButtonPosition.y, 180, 50, 5);
    textFont(titleFont, 96);
    fill(0);
    text("You escaped!\nYour soul is now free!", width/2, 150);
    fill(0xFFFF0000);
    text("You escaped!\nYour soul is now free!", width/2-4, 146);
    textFont(baseFont, 24);
    fill(0);
    text("Main Menu", mainmenuButtonPosition.x, mainmenuButtonPosition.y);
    text("Quit", quitButtonPosition.x, quitButtonPosition.y);
}

public void resetGame()
{
    sceneManager.loadScene(basementScene);
    basementScene.addMoveButton(new PVector(570, 215), new PVector(64, 64), magnifier, GameState.PipeGame);
    storageScene.addMoveButton(new PVector(265, 300), new PVector(64, 64), magnifier, GameState.JarGame);
    kitchenScene.addItemButton(new PVector(510, 200), new PVector(64, 64), cookKey);
    correctJarOrder = new Jar[jarCount];
    randomJarOrder = new Jar[jarCount];
    for(int i = 0; i < jarCount; i++)
    {
        correctJarOrder[i] = new Jar(new PVector(100, 200 + (i * 10)), i, jarImage);
    }
    for(int i = 0; i < jarCount; i++)
    {
        scrambleJars(i);
    }
    selectedJar = null;
    for(int i = 0; i < pipeHolders.size(); i++)
    {
        PipeHolder pH = pipeHolders.get(i);
        switch(pipeLayouts[usedLayout][i])
        {
            case 0:
                pH.heldPipe = new CornerPipe(pH.position, (int)(random(0, 4)), i, cornerPipeImages);
                break;
            case 1:
                pH.heldPipe = new StraightPipe(pH.position, (int)(random(4, 6)), i, straightPipeImages);
                break;
        }
    }
    isPipeGameOver = false;
}

public boolean isDelayOver()
{
    return millis() >= targetMilliseconds;
}

public void setupDelay(int secondsToDelay)
{
    targetMilliseconds = millis() + secondsToDelay*1000;
    isDelaySet = true;
}
enum ButtonType{Item, Move}

class Button
{
    PVector buttonPosition;
    PVector buttonSize;

    public void drawButton()
    {
        strokeWeight(0);
        rectMode(CENTER);
        fill(255, 255, 255, 0);
        rect(buttonPosition.x, buttonPosition.y, buttonSize.x, buttonSize.y);
    }

    public void buttonAction()
    {}
}
class CornerPipe extends Pipe
{
    PImage[] sprites = new PImage[4];

    CornerPipe(PVector pHolderPos, int pRotation, int pArrayIndex, PImage[] pImageArray)
    {
        pipeRotationNum = pRotation;
        holderPosition = pHolderPos;
        arrayIndex = pArrayIndex;
        sprites = pImageArray;
        switch(pRotation)
        {
            case 0:
                pipeRotation = PipeState.SouthEast;
                break;
            case 1:
                pipeRotation = PipeState.SouthWest;
                break;
            case 2:
                pipeRotation = PipeState.NorthWest;
                break;
            case 3:
                pipeRotation = PipeState.NorthEast;
                break;
        }
    }

    public void drawPipe()
    {
        fill(0);
        switch (pipeRotation) 
        {
            case SouthEast:
                spriteToDraw = sprites[0];
                break;
            case SouthWest:
                spriteToDraw = sprites[1];
                break;
            case NorthEast:
                spriteToDraw = sprites[2];
                break;
            case NorthWest:
                spriteToDraw = sprites[3];
                break;
        }
        image(spriteToDraw, holderPosition.x - gridBoxSize / 2, holderPosition.y - gridBoxSize / 2, gridBoxSize, gridBoxSize);
    }

    public void rotatePipe()
    {
        pipeSound.play();
        if(pipeRotationNum < 3) pipeRotationNum++;
        else pipeRotationNum = 0;
        switch(pipeRotationNum)
        {
            case 0:
                pipeRotation = PipeState.SouthEast;
                break;
            case 1:
                pipeRotation = PipeState.SouthWest;
                break;
            case 2:
                pipeRotation = PipeState.NorthWest;
                break;
            case 3:
                pipeRotation = PipeState.NorthEast;
                break;
        }
    }
}
class ExitButton extends Button
{
    PImage buttonIcon;
    Scene exitScene;

    ExitButton(PVector pPos, PVector pSize, PImage pIcon, Scene pScene)
    {
        buttonPosition = pPos;
        buttonSize = pSize;
        buttonIcon = pIcon;
        exitScene = pScene;
    }

    public void drawButton()
    {
        fill(255, 255, 255, 255);
        image(buttonIcon, buttonPosition.x - buttonSize.x/2, buttonPosition.y - buttonSize.y/2, 64, 64);
    }

    public void buttonAction()
    {
        boolean exit = allowExit(false);
        if(exit) 
        {
            mainDoorUnlock.play();
            allowExit(true);
            gameState = GameState.WinMenu;
            isWinMenu = true;
        }
    }

    public boolean allowExit(boolean removeKeys)
    {
        boolean isPipeKey = false;
        boolean isCookKey = false;
        boolean isJarKey = false;
        if(inventory.isInInventory(pipeKey, removeKeys)) {isPipeKey = true;}
        if(inventory.isInInventory(cookKey, removeKeys)) {isCookKey = true;}
        if(inventory.isInInventory(jarKey, removeKeys)) {isJarKey = true;}
        return isPipeKey && isCookKey && isJarKey;
    }
}
class Inventory
{
    ArrayList<Item> heldItems = new ArrayList<Item>();
    int slotCount;
    int boxSize;
    int yOffset;
    int xPos = 10;
    boolean allowItemPickup;

    Inventory(int pSlotCount, int pBoxSize, int pYOffset)
    {
        slotCount = pSlotCount;
        boxSize = pBoxSize;
        yOffset = pYOffset;
    }

    public void drawInventory()
    {
        allowItemPickup = (heldItems.size() < slotCount) ? true : false;
        strokeWeight(0);
        fill(255, 255, 255, 255);
        for(int i = 0; i < slotCount; i++)
        {
            int yPos = (i * boxSize) + yOffset * (i + 1);
            rectMode(CORNER);
            rect(xPos, yPos, boxSize, boxSize);
        }
        int loopCount = min(heldItems.size(), slotCount);
        for(int i = 0; i < loopCount; i++)
        {
            Item item = heldItems.get(i);
            int yPos = (i * boxSize) + yOffset * (i + 1);
            image(item.itemImage, xPos, yPos, boxSize, boxSize);
        }
    }

    public boolean isInInventory(Item item, boolean removeFound)
    {
        boolean foundItem = false;
        for(int i = 0; i < heldItems.size(); i++)
        {
            if(heldItems.get(i) == item)
            {
                if(removeFound)
                {
                    heldItems.remove(i);
                }
                foundItem = true;
                break;
            }
        }
        return foundItem;
    }
}
class Item
{
    PImage itemImage;

    Item(PImage pitemImage)
    {
        itemImage = pitemImage;
    }
}
class ItemButton extends Button
{
    Item buttonItem;
    ArrayList removeButtonFrom;

    ItemButton(PVector pPos, PVector pSize, Item pItem, ArrayList pArray)
    {
        buttonPosition = pPos;
        buttonSize = pSize;
        buttonItem = pItem;
        removeButtonFrom = pArray;
    }

    public void buttonAction()
    {
        if(inventory.allowItemPickup)
        {
            inventory.heldItems.add(buttonItem);
            removeButtonFrom.remove(this);
            grabObject.play();
        }
        else
        {
            println("inv full");
        }
    }

    public void drawButton()
    {
        strokeWeight(12);
        fill(255, 255, 255, 255);
        image(buttonItem.itemImage, buttonPosition.x - buttonSize.x/2, buttonPosition.y - buttonSize.y/2, buttonSize.x, buttonSize.y);
    }
}
class Jar
{
    int indexInArray;
    int jarPosition;
    PVector jarSize;
    PVector position;
    PImage jarIcon;
    boolean isJarSelected;
    boolean isInCorrectSpot;
    Jar(PVector pSize, int pIndex, PImage pIcon)
    {
        jarSize = pSize;
        indexInArray = pIndex;
        jarIcon = pIcon;
        position = new PVector(0, 0);
    }

    public void drawJar()
    {
        position.x = jarPosition * 100 + (jarPosition * 50) + 200;
        position.y = height/2 - (indexInArray * 10)/2;
        fill(255, 255, 255, 255);
        imageMode(CENTER);
        image(jarIcon, position.x, position.y, jarSize.x, jarSize.y);
        fill(0);
        if(jarPosition == indexInArray) isInCorrectSpot = true;
        else isInCorrectSpot = false;
    }

    public boolean isOverJar()
    {
        return mouseX < position.x + jarSize.x/2 && mouseX > position.x - jarSize.x/2 && mouseY < position.y + jarSize.y/2 && mouseY > position.y - jarSize.y/2;
    }
}
class JarButton
{
    PImage arrow;
    PVector position;
    JarButton(PImage pImage, PVector pPos)
    {
        arrow = pImage;
        position = pPos;
    }

    public void moveRight(int toMoveIndex)
    {
        if(toMoveIndex == 4)
        {
            println("cannot move");
        }
        else
        {
            Jar jar1 = randomJarOrder[toMoveIndex];
            Jar jar2 = randomJarOrder[toMoveIndex + 1];
            randomJarOrder[toMoveIndex] = jar2;
            randomJarOrder[toMoveIndex + 1] = jar1;
            jar1.jarPosition = toMoveIndex + 1;
            jar2.jarPosition = toMoveIndex;
        }
    }

    public void moveLeft(int toMoveIndex)
    {
        if(toMoveIndex == 0)
        {
            println("cannot move");
        }
        else
        {
            Jar jar1 = randomJarOrder[toMoveIndex];
            Jar jar2 = randomJarOrder[toMoveIndex - 1];
            randomJarOrder[toMoveIndex] = jar2;
            randomJarOrder[toMoveIndex - 1] = jar1;
            jar1.jarPosition = toMoveIndex - 1;
            jar2.jarPosition = toMoveIndex;
        }
    }

    public void drawArrow()
    {
        imageMode(CORNER);
        image(arrow, position.x - 32, position.y - 32, 64, 64);
    }

    public boolean isOverJarButton()
    {
        return mouseX < position.x + 32 && mouseX > position.x - 32 && mouseY < position.y + 32 && mouseY > position.y - 32;
    }
}
class MoveButton extends Button
{
    GameState nextGameState;
    ButtonType buttonType;
    Scene sceneToMove;
    PImage buttonIcon;
    Item requieredItem;

    MoveButton(PVector pPos, PVector pSize, Scene pScene)
    {
        buttonPosition = pPos;
        buttonSize = pSize;
        sceneToMove = pScene;
    }

    MoveButton(PVector pPos, PVector pSize, Scene pScene, PImage pIcon)
    {
        buttonPosition = pPos;
        buttonSize = pSize;
        sceneToMove = pScene;
        buttonIcon = pIcon;
    }

    MoveButton(PVector pPos, PVector pSize, Scene pScene, PImage pIcon, Item pItem)
    {
        buttonPosition = pPos;
        buttonSize = pSize;
        sceneToMove = pScene;
        buttonIcon = pIcon;
        requieredItem = pItem;
    }

    MoveButton(PVector pPos, PVector pSize, PImage pIcon, GameState pGameState)
    {
        buttonPosition = pPos;
        buttonSize = pSize;
        buttonIcon = pIcon;
        nextGameState = pGameState;
    }

    public void drawButton()
    {
        strokeWeight(0);
        rectMode(CENTER);
        fill(255, 255, 255, 0);
        rect(buttonPosition.x, buttonPosition.y, buttonSize.x, buttonSize.y);
        fill(255, 255, 255, 255);
        imageMode(CORNER);
        if(buttonIcon != null) image(buttonIcon, buttonPosition.x - buttonSize.x/2, buttonPosition.y - buttonSize.y/2, 64, 64);
    }

    public void buttonAction()
    {
        if(requieredItem != null)
        {
            if(inventory.isInInventory(requieredItem, true))
            {
                playTransitionSound();
                sceneManager.loadScene(sceneToMove);
            }
            else
            {
                println("missing item");
            }
        }
        else if(nextGameState != null)
        {
            gameState = nextGameState;
        }
        else
        {
            playTransitionSound();
            sceneManager.loadScene(sceneToMove);
        }
    }

    public void playTransitionSound()
    {
        roomTransitions[(int)(random(0,3))].play();
    }
}
enum PipeState{SouthEast, SouthWest, NorthEast, NorthWest, UpDown, LeftRight};
class Pipe
{
    PImage spriteToDraw;
    PipeState pipeRotation;
    PVector holderPosition;
    int pipeRotationNum;
    int arrayIndex;

    public void rotatePipe()
    {}

    public void drawPipe()
    {}
}
class PipeHolder
{
    PVector position;
    Pipe heldPipe;

    PipeHolder(PVector pPos)
    {
        position = pPos;
    }

    public void drawHolder()
    {
        rectMode(CENTER);
        fill(255, 255, 255, 0);
        rect(position.x, position.y, gridBoxSize, gridBoxSize);
        heldPipe.drawPipe();
    }

    public boolean isOverHeldPipe()
    {
        return mouseX < position.x + gridBoxSize/2 && mouseX > position.x - gridBoxSize/2 && mouseY < position.y + gridBoxSize/2 && mouseY > position.y - gridBoxSize/2;
    }
}
class Scene
{
    PImage background;
    ArrayList<Button> sceneButtons = new ArrayList<Button>();
    ArrayList<TextBox> sceneTexts = new ArrayList<TextBox>();
    boolean isTextBeingRendered = false;

    Scene(PImage pBackground)
    {
        background = pBackground;
    }

    //Draws the scene and the buttons in the scene
    public void drawScene()
    {
        imageMode(CORNER);
        image(background, 0, 0, width, height);
        for(Button button : sceneButtons)
        {
            button.drawButton();
        }
        for(TextBox textBox : sceneTexts)
        {
            if(textBox.renderText) {textBox.drawTextBox();}
        }
    }

    //Basic move button
    public void addMoveButton(PVector pPos, PVector pSize, Scene pScene)
    {
        sceneButtons.add(new MoveButton(pPos, pSize, pScene));
    }

    //Move button with icon
    public void addMoveButton(PVector pPos, PVector pSize, Scene pScene, PImage pIcon)
    {
        sceneButtons.add(new MoveButton(pPos, pSize, pScene, pIcon));
    }

    //Move button with Item condition
    public void addMoveButton(PVector pPos, PVector pSize, Scene pScene, PImage pIcon, Item pItem)
    {
        sceneButtons.add(new MoveButton(pPos, pSize, pScene, pIcon, pItem));
    }

    //Move button with GameState change - use when changing to minigames
    public void addMoveButton(PVector pPos, PVector pSize, PImage pIcon, GameState pGameState)
    {
        sceneButtons.add(new MoveButton(pPos, pSize, pIcon, pGameState));
    }

    //Basic item button
    public void addItemButton(PVector pPos, PVector pSize, Item pItem)
    {
        sceneButtons.add(new ItemButton(pPos, pSize, pItem, sceneButtons));
    }

    //Basic text button
    public void addTextButton(PVector pPos, PVector pSize, PImage pIcon, TextBox pText)
    {
        sceneButtons.add(new TextButton(pPos, pSize, pIcon, pText));
    }

    //Add mansion exit button
    public void addExitButton(PVector pPos, PVector pSize, PImage pIcon, Scene pScene)
    {
        sceneButtons.add(new ExitButton(pPos, pSize, pIcon, pScene));
    }

    //Basic text box
    public TextBox createTextBox(String pText)
    {
        TextBox tempTextBox = new TextBox(pText, this);
        sceneTexts.add(tempTextBox);
        return tempTextBox;
    }

    //Checks for collision on all buttons in the Scene
    public void checkButtonCollision()
    {
        if(isTextBeingRendered) 
        {
            isTextBeingRendered = false;
            for(TextBox textBox : sceneTexts)
            {
                if(textBox.renderText)
                {
                    textBox.toggleRender();
                    break;
                }
            }
        }
        else 
        {
            for(Button button : sceneButtons)
            {
                if(mouseX < button.buttonPosition.x + button.buttonSize.x/2 && mouseX > button.buttonPosition.x - button.buttonSize.x/2 && mouseY < button.buttonPosition.y + button.buttonSize.y/2 && mouseY > button.buttonPosition.y - button.buttonSize.y/2)
                {
                    button.buttonAction();
                    break;
                }
            }
        }
    }
}
class SceneManager
{
    Scene currentScene;

    public void draw()
    {
        currentScene.drawScene();
    }

    public void loadScene(Scene newScene)
    {
        currentScene = newScene;
    }

    public void mouseClick()
    {
        currentScene.checkButtonCollision();
    }
}
class StraightPipe extends Pipe
{
    PImage[] sprites = new PImage[2];

    StraightPipe(PVector pHolderPos, int pRotation, int pArrayIndex, PImage[] pImageArray)
    {
        pipeRotationNum = pRotation;
        holderPosition = pHolderPos;
        arrayIndex = pArrayIndex;
        sprites = pImageArray;
        switch(pRotation)
        {
            case 4:
                pipeRotation = PipeState.UpDown;
                break;
            case 5:
                pipeRotation = PipeState.LeftRight;
                break;
        }
    }

    public void drawPipe()
    {
        fill(255, 255, 255, 0);
        switch(pipeRotation)
        {
            case UpDown:
                spriteToDraw = sprites[0];
                break;
            case LeftRight:
                spriteToDraw = sprites[1];
                break;
        }
        image(spriteToDraw, holderPosition.x - gridBoxSize / 2, holderPosition.y - gridBoxSize / 2, gridBoxSize, gridBoxSize);
    }

    public void rotatePipe()
    {
        pipeSound.play();
        switch(pipeRotationNum)
        {
            case 4:
                pipeRotationNum = 5;
                pipeRotation = PipeState.LeftRight;
                break;
            case 5:
                pipeRotationNum = 4;
                pipeRotation = PipeState.UpDown;
                break;
        }
    }
}
class TextBox
{
    String bodyText;
    boolean renderText;
    Scene parentScene;

    TextBox(String pText, Scene pScene)
    {
        bodyText = pText;
        parentScene = pScene;
    }

    public void toggleRender()
    {
        renderText = !renderText;
        parentScene.isTextBeingRendered = renderText;
    }

    public void drawTextBox()
    {
        rectMode(CENTER);
        strokeWeight(2);
        fill(255, 255, 255, 255);
        rect(width/2, 550, width - 40, 80);
        textAlign(LEFT, TOP);
        textFont(baseFont, 20);
        fill(0, 0, 0, 255);
        rectMode(CENTER);
        text(bodyText, width/2, 550, width - 60, 70);
    }
}
class TextButton extends Button
{
    PImage buttonIcon;
    TextBox textBoxToRender; 

    TextButton(PVector pPos, PVector pSize, PImage pIcon, TextBox pTextBox)
    {
        buttonPosition = pPos;
        buttonSize = pSize;
        buttonIcon = pIcon;
        textBoxToRender = pTextBox;
    }

    public void buttonAction()
    {
        textBoxToRender.toggleRender();
    }

    public void drawButton()
    {
        strokeWeight(12);
        fill(255, 255, 255, 255);
        image(buttonIcon, buttonPosition.x - buttonSize.x/2, buttonPosition.y - buttonSize.y/2, buttonSize.x, buttonSize.y);
    }
}


  public void settings() { size(1000, 600); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "first_contact" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
