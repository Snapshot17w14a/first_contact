/* autogenerated by Processing revision 1293 on 2023-11-21 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class first_contact extends PApplet {

SceneManager sceneManager;
Scene currentScene;
Scene initialScene;
Scene room1Scene;
PImage img1;
PImage img2;
PImage magnifier;
Inventory inventory;
Item glass;

boolean allowMouseClick = true;

public void setup() 
{
    /* size commented out by preprocessor */;
    img1 = loadImage("testBackground.jpg");
    img2 = loadImage("Factory1.png");
    magnifier = loadImage("magnifier.png");
    sceneManager = new SceneManager();
    inventory = new Inventory(3, 100, 10);
    glass = new Item(magnifier);

    room1Scene = new Scene(img2);
    initialScene = new Scene(img1);

    room1Scene.addMoveButton(new PVector(200, 400), new PVector(64, 64), initialScene, magnifier, glass);
    initialScene.addMoveButton(new PVector(400, 600), new PVector(100, 120), room1Scene);

    room1Scene.addItemButton(new PVector(400, 200), new PVector(32, 32), glass);
    room1Scene.addItemButton(new PVector(300, 400), new PVector(32, 32), glass);
    room1Scene.addItemButton(new PVector(600, 100), new PVector(32, 32), glass);
    room1Scene.addItemButton(new PVector(700, 500), new PVector(32, 32), glass);

<<<<<<< Updated upstream
    sceneManager.loadScene(initialScene);
=======
    //Move button initialization
    basementScene.addMoveButton(new PVector(270, 175), new PVector(64, 64), hallwayScene, magnifier);
    basementScene.addMoveButton(new PVector(570, 215), new PVector(64, 64), magnifier, GameState.PipeGame);
    hallwayScene.addMoveButton(new PVector(490, 530), new PVector(64, 64), basementScene, magnifier);
    hallwayScene.addMoveButton(new PVector(775, 320), new PVector(64, 64), kitchenScene, magnifier);
    hallwayScene.addMoveButton(new PVector(430, 290), new PVector(64, 64), storageScene, magnifier);
    kitchenScene.addMoveButton(new PVector(100, 400), new PVector(64, 64), hallwayScene, magnifier);
    storageScene.addMoveButton(new PVector(width/2, 550), new PVector(64, 64), hallwayScene, magnifier);

    //Item button initialization

    //Text button initialization
    hallwayScene.addTextButton(new PVector(270, 250), new PVector(64, 64), magnifier, hallwayWoodBeam);

    //Load first scene
    sceneManager.loadScene(basementScene);

    //Pipe Game initialization
    for(int rows = 0; rows < gridHeight; rows++)
    {
        int yPos = 170 + (gridBoxSize * rows);
        for(int column = 0; column < gridWidth; column++)
        {
            int xPos = 217 + (gridBoxSize * column);
            pipeHolders.add(new PipeHolder(new PVector(xPos, yPos)));
        }
    }
    PipeHolder ph = pipeHolders.get(0);
    usedLayout = (int)(random(0, 2));
    for(int i = 0; i < pipeHolders.size(); i++)
    {
        PipeHolder pH = pipeHolders.get(i);
        switch(pipeLayouts[usedLayout][i])
        {
            case 0:
                pH.heldPipe = new CornerPipe(pH.position, (int)(random(0, 4)), i, cornerPipeImages);
                break;
            case 1:
                pH.heldPipe = new StraightPipe(pH.position, (int)(random(4, 6)), i, straightPipeImages);
                break;
        }
    }
>>>>>>> Stashed changes
}

public void draw() 
{
    background(0);
    sceneManager.draw();
    inventory.drawInventory();
}

public void mousePressed() 
{
    if(allowMouseClick) sceneManager.mouseClick();
    allowMouseClick = false;
}

public void mouseReleased()
{
    allowMouseClick = true;
}
enum ButtonType{Item, Move}

class Button
{
    PVector buttonPosition;
    PVector buttonSize;

    public void drawButton()
    {
        strokeWeight(0);
        rectMode(CENTER);
        fill(255, 255, 255, 0);
        rect(buttonPosition.x, buttonPosition.y, buttonSize.x, buttonSize.y);
    }

    public void buttonAction()
    {}
}
class Inventory
{
    ArrayList<Item> heldItems = new ArrayList<Item>();
    int slotCount;
    int boxSize;
    int yOffset;
    int xPos = 10;
    boolean allowItemPickup;

    Inventory(int pSlotCount, int pBoxSize, int pYOffset)
    {
        slotCount = pSlotCount;
        boxSize = pBoxSize;
        yOffset = pYOffset;
    }

    public void drawInventory()
    {
        allowItemPickup = (heldItems.size() < slotCount) ? true : false;
        strokeWeight(0);
        fill(255, 255, 255, 255);
        for(int i = 0; i < slotCount; i++)
        {
            int yPos = (i * boxSize) + yOffset * (i + 1);
            rectMode(CORNER);
            rect(xPos, yPos, boxSize, boxSize);
        }
        int loopCount = min(heldItems.size(), slotCount);
        for(int i = 0; i < loopCount; i++)
        {
            Item item = heldItems.get(i);
            int yPos = (i * boxSize) + yOffset * (i + 1);
            image(item.itemImage, xPos, yPos, boxSize, boxSize);
        }
    }

    public boolean isInInventory(Item item, boolean removeFound)
    {
        boolean foundItem = false;
        for(int i = 0; i < heldItems.size(); i++)
        {
            if(heldItems.get(i) == item)
            {
                if(removeFound)
                {
                    heldItems.remove(i);
                }
                foundItem = true;
                break;
            }
        }
        return foundItem;
    }
}
class Item
{
    PImage itemImage;

    Item(PImage pitemImage)
    {
        itemImage = pitemImage;
    }
}
class ItemButton extends Button
{
    Item buttonItem;
    ArrayList removeButtonFrom;

    ItemButton(PVector pPos, PVector pSize, Item pItem, ArrayList pArray)
    {
        buttonPosition = pPos;
        buttonSize = pSize;
        buttonItem = pItem;
        removeButtonFrom = pArray;
    }

    public void buttonAction()
    {
        if(inventory.allowItemPickup)
        {
            inventory.heldItems.add(buttonItem);
            removeButtonFrom.remove(this);
        }
        else
        {
            println("inv full");
        }
    }

    public void drawButton()
    {
        strokeWeight(12);
        fill(255, 255, 255, 255);
        image(buttonItem.itemImage, buttonPosition.x - buttonSize.x/2, buttonPosition.y - buttonSize.y/2, buttonSize.x, buttonSize.y);
    }
}
class MoveButton extends Button
{
    ButtonType buttonType;
    Scene sceneToMove;
    PImage buttonIcon;
    Item requieredItem;

    MoveButton(PVector pPos, PVector pSize, Scene pScene)
    {
        buttonPosition = pPos;
        buttonSize = pSize;
        sceneToMove = pScene;
    }

    MoveButton(PVector pPos, PVector pSize, Scene pScene, PImage pIcon)
    {
        buttonPosition = pPos;
        buttonSize = pSize;
        sceneToMove = pScene;
        buttonIcon = pIcon;
    }

    MoveButton(PVector pPos, PVector pSize, Scene pScene, PImage pIcon, Item pItem)
    {
        buttonPosition = pPos;
        buttonSize = pSize;
        sceneToMove = pScene;
        buttonIcon = pIcon;
        requieredItem = pItem;
    }

    public void drawButton()
    {
        strokeWeight(0);
        rectMode(CENTER);
        fill(255, 255, 255, 0);
        rect(buttonPosition.x, buttonPosition.y, buttonSize.x, buttonSize.y);
        fill(255, 255, 255, 255);
        if(buttonIcon != null) image(buttonIcon, buttonPosition.x - buttonSize.x/2, buttonPosition.y - buttonSize.y/2, 64, 64);
    }

    public void buttonAction()
    {
        if(requieredItem != null)
        {
            if(inventory.isInInventory(requieredItem, true))
            {
                sceneManager.loadScene(sceneToMove);
            }
            else
            {
                println("missing item");
            }
        }
        else
        {
            sceneManager.loadScene(sceneToMove);
        }
    }
}
class Scene
{
    PImage background;
    ArrayList<Button> sceneButtons = new ArrayList<Button>();

    Scene(PImage pBackground)
    {
        background = pBackground;
    }

    public void drawScene()
    {
        image(background, 0, 0, width, height);
        for(Button button : sceneButtons)
        {
            button.drawButton();
        }
    }

    public void addMoveButton(PVector pPos, PVector pSize, Scene pScene)
    {
        sceneButtons.add(new MoveButton(pPos, pSize, pScene));
    }

    public void addMoveButton(PVector pPos, PVector pSize, Scene pScene, PImage pIcon)
    {
        sceneButtons.add(new MoveButton(pPos, pSize, pScene, pIcon));
    }

    public void addMoveButton(PVector pPos, PVector pSize, Scene pScene, PImage pIcon, Item pItem)
    {
        sceneButtons.add(new MoveButton(pPos, pSize, pScene, pIcon, pItem));
    }

    public void addItemButton(PVector pPos, PVector pSize, Item pItem)
    {
        sceneButtons.add(new ItemButton(pPos, pSize, pItem, sceneButtons));
    }

    public void checkButtonCollision()
    {
        for(Button button : sceneButtons)
        {
            if(mouseX < button.buttonPosition.x + button.buttonSize.x/2 && mouseX > button.buttonPosition.x - button.buttonSize.x/2 && mouseY < button.buttonPosition.y + button.buttonSize.y/2 && mouseY > button.buttonPosition.y - button.buttonSize.y/2)
            {
                button.buttonAction();
                break;
            }
        }
    }
}
class SceneManager
{
    Scene currentScene;

    public void draw()
    {
        currentScene.drawScene();
    }

    public void loadScene(Scene newScene)
    {
        currentScene = newScene;
    }

    public void mouseClick()
    {
        currentScene.checkButtonCollision();
    }
}


  public void settings() { size(800, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "first_contact" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
